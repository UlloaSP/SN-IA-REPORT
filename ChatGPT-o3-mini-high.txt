------------------------------------------------ YO --------------------------------------------------

SN – ejercicio IA
Predicción utilizando herramientas de IA
Utiliza un modelo de LLM o agente de IA (por ejemplo: chatGPT, Copilot, etc.) para predecir lo que quieras (por
ejemplo: el precio de BTC para los próximos 3 días utilizando solo los precios del mes anterior). Envía un único
archivo PDF que incluya la captura de pantalla con los prompts y la herramienta de IA, la solución generada por
IA incluyendo el script de Python, estadísticas y gráficos. Utiliza al menos tres tipos diferentes de modelos
(clasificación o regresión) y usa la IA para calcular las predicciones en la pantalla. Obtén el conjunto de datos
utilizando la IA o mediante un enlace a un dataset existente. Usa este conjunto de datos para probar el script
en los cuadernos de Jupyter de Google Colab y añade capturas de pantalla de los resultados de la prueba.
Para completar esta tarea, sigue estos pasos:
1. Elige un modelo de IA para generar las predicciones y el script (por ejemplo, ChatGPT o GitHub
Copilot).
2. Crea un nuevo cuaderno en Google Colab.
3. Utiliza el modelo de IA para obtener un enlace a un conjunto de datos adecuado para tu predicción (o
encontrar un dataset).
4. Escribe los prompts necesarios para que la IA genere:
o Un script de Python que incluya la importación de datos.
o Tres modelos diferentes (clasificación o regresión) para realizar predicciones.
o Código para visualizar los resultados y estadísticas.
5. Ejecuta el script generado en Google Colab y captura los resultados.
6. Recopila todas las capturas de pantalla, incluyendo:
o Los prompts utilizados con la herramienta de IA.
o El código generado por la IA.
o Los resultados de la ejecución en Google Colab, incluyendo gráficos y estadísticas.
5. Combina todo en un único archivo PDF.
Consejos adicionales:
• Utiliza las funciones de Google Colab para ejecutar el código y mostrar los gráficos directamente en el
cuaderno.
• Asegúrate de que el script de Python generado incluya la importación de las bibliotecas necesarias para
el análisis de datos y la visualización.
• Si necesitas usar claves de API o información sensible, manéjalas de forma segura en el cuaderno de
Jupyter.
• Aprovecha las capacidades de Google Colab para acceder a recursos de computación, incluyendo GPUs
si es necesario para modelos más complejos.
Recuerda que el objetivo es demostrar el uso de IA para generar y ejecutar código de predicción, por lo que
asegúrate de documentar claramente cada paso del proceso en tu archivo PDF final.

--> Dame un prompt lo mas completo posible para el modelo 03-mini-high, no incluyas la parte del pdf

------------------------------------------------ CHATGPT --------------------------------------------------


Aquí tienes un prompt detallado y completo para que un modelo de lenguaje genere el cuaderno en formato .iynb que cumpla con las siguientes especificaciones:

Prompt:

    Actúa como un experto en Machine Learning, desarrollo en Python y creación de cuadernos Jupyter (notebooks) en formato JSON, listo para ejecutarse en Google Colab. Necesito que generes un cuaderno (.ipynb) que realice los siguientes pasos:

        Carga y Preprocesamiento del Dataset:
            Descarga el dataset desde la siguiente URL:
            https://raw.githubusercontent.com/ibrahim-cheema/Analysis-of-Cryptocurrency-Prices/main/bitcoin_data.csv
            El dataset contiene las columnas: time, open, high, low, price, vwap, volume, currency y log_return.
            Convierte la columna time a tipo datetime utilizando el formato %Y-%m-%d.
            Ordena los datos cronológicamente y restablece el índice.
        Generación de la Variable Objetivo:
            Crea una nueva columna llamada Target desplazando la columna price 3 días hacia arriba (shift -3) para predecir el precio de Bitcoin a 3 días vista.
            Elimina las filas que no tengan valor en Target y reinicia el índice.
        Selección de Características:
            Selecciona como características (features) las siguientes columnas: open, high, low, price, vwap, volume y log_return.
            Excluye la columna currency ya que es constante.
        División en Conjuntos de Entrenamiento y Prueba:
            Divide el dataset en un 80% de entrenamiento y un 20% de prueba, manteniendo el orden cronológico (establece shuffle=False).
        Imputación de Valores Nulos:
            Utiliza el SimpleImputer de scikit-learn con estrategia median para rellenar cualquier valor nulo en las características, aplicándolo sobre el conjunto de entrenamiento y transformando también el conjunto de prueba.
        Entrenamiento de Modelos:
            Entrena tres modelos de regresión:
                LinearRegression
                RandomForestRegressor con n_estimators=100 y random_state=42
                XGBoostRegressor con objective='reg:squarederror', n_estimators=100 y random_state=42
        Predicción Iterativa para los Próximos 3 Días:
            Define una función iterative_forecast(model, last_features, n_days=3) que realice una predicción iterativa. En cada iteración, actualiza el vector de características de forma naïve de la siguiente manera:
                El nuevo open se establece igual al precio predicho.
                El nuevo high se simula como el precio predicho multiplicado por 1.01.
                El nuevo low se simula como el precio predicho multiplicado por 0.99.
                El nuevo price y vwap se establecen igual al precio predicho.
                La volume se mantiene constante.
                El nuevo log_return se calcula como np.log(pred/old_price) si old_price > 0, o 0 en caso contrario.
            Utiliza esta función para obtener el pronóstico (predicciones) de los próximos 3 días para cada uno de los modelos.
        Visualización: Gráficos Separados por Modelo:
            Extrae los últimos 3 registros reales (fechas y precios reales) del dataset.
            Para cada modelo, genera un gráfico separado que muestre:
                En el eje x, 6 tick marks: los últimos 3 días reales (fechas) y los 3 días pronosticados (sin duplicados).
                En el eje y, los precios correspondientes.
                Una línea que conecte los últimos 3 datos reales y, a continuación, el pronóstico iterativo para los próximos 3 días.
                Una línea vertical punteada que separe la zona de datos reales de la zona de datos pronosticados (colócala en el último día real).
                Conecta el último punto real con el primer punto del pronóstico mediante una línea discontinua.
                Anota cada punto de pronóstico con su valor exacto, colocado en el margen del eje y (con un pequeño offset vertical distinto para cada modelo) y conectándolo al punto con una línea punteada del mismo color.
            Usa colores: azul para LinearRegression, verde para RandomForestRegressor y rojo para XGBoostRegressor.
        Formato Final del Notebook:
            El cuaderno debe estar en formato JSON, completo y listo para ejecutarse.
            No incluyas ninguna instrucción print().
            Asegúrate de que el eje de fechas no tenga duplicados y muestre correctamente las 6 fechas (3 reales y 3 predichas).
            Cada gráfico debe tener título, etiquetas en los ejes y leyenda.

    Devuelve el cuaderno completo en formato JSON.

Este prompt es lo más completo y detallado posible para generar el cuaderno python descrito anteriormente. Ajusta el prompt según sea necesario, pero con esta descripción el modelo debería generar un .ipynb que cumpla con todos los requisitos.

------------------------------------------------ YO --------------------------------------------------

Actúa como un experto en Machine Learning, desarrollo en Python y creación de cuadernos Jupyter (notebooks) en formato JSON, listo para ejecutarse en Google Colab. Necesito que generes un cuaderno (.ipynb) que realice los siguientes pasos:

        Carga y Preprocesamiento del Dataset:
            Descarga el dataset desde la siguiente URL:
            https://raw.githubusercontent.com/ibrahim-cheema/Analysis-of-Cryptocurrency-Prices/main/bitcoin_data.csv
            El dataset contiene las columnas: time, open, high, low, price, vwap, volume, currency y log_return.
            Convierte la columna time a tipo datetime utilizando el formato %Y-%m-%d.
            Ordena los datos cronológicamente y restablece el índice.
        Generación de la Variable Objetivo:
            Crea una nueva columna llamada Target desplazando la columna price 3 días hacia arriba (shift -3) para predecir el precio de Bitcoin a 3 días vista.
            Elimina las filas que no tengan valor en Target y reinicia el índice.
        Selección de Características:
            Selecciona como características (features) las siguientes columnas: open, high, low, price, vwap, volume y log_return.
            Excluye la columna currency ya que es constante.
        División en Conjuntos de Entrenamiento y Prueba:
            Divide el dataset en un 80% de entrenamiento y un 20% de prueba, manteniendo el orden cronológico (establece shuffle=False).
        Imputación de Valores Nulos:
            Utiliza el SimpleImputer de scikit-learn con estrategia median para rellenar cualquier valor nulo en las características, aplicándolo sobre el conjunto de entrenamiento y transformando también el conjunto de prueba.
        Entrenamiento de Modelos:
            Entrena tres modelos de regresión:
                LinearRegression
                RandomForestRegressor con n_estimators=100 y random_state=42
                XGBoostRegressor con objective='reg:squarederror', n_estimators=100 y random_state=42
        Predicción Iterativa para los Próximos 3 Días:
            Define una función iterative_forecast(model, last_features, n_days=3) que realice una predicción iterativa. En cada iteración, actualiza el vector de características de forma naïve de la siguiente manera:
                El nuevo open se establece igual al precio predicho.
                El nuevo high se simula como el precio predicho multiplicado por 1.01.
                El nuevo low se simula como el precio predicho multiplicado por 0.99.
                El nuevo price y vwap se establecen igual al precio predicho.
                La volume se mantiene constante.
                El nuevo log_return se calcula como np.log(pred/old_price) si old_price > 0, o 0 en caso contrario.
            Utiliza esta función para obtener el pronóstico (predicciones) de los próximos 3 días para cada uno de los modelos.
        Visualización: Gráficos Separados por Modelo:
            Extrae los últimos 3 registros reales (fechas y precios reales) del dataset.
            Para cada modelo, genera un gráfico separado que muestre:
                En el eje x, 6 tick marks: los últimos 3 días reales (fechas) y los 3 días pronosticados (sin duplicados).
                En el eje y, los precios correspondientes.
                Una línea que conecte los últimos 3 datos reales y, a continuación, el pronóstico iterativo para los próximos 3 días.
                Una línea vertical punteada que separe la zona de datos reales de la zona de datos pronosticados (colócala en el último día real).
                Conecta el último punto real con el primer punto del pronóstico mediante una línea discontinua.
                Anota cada punto de pronóstico con su valor exacto, colocado en el margen del eje y (con un pequeño offset vertical distinto para cada modelo) y conectándolo al punto con una línea punteada del mismo color.
            Usa colores: azul para LinearRegression, verde para RandomForestRegressor y rojo para XGBoostRegressor.
        Formato Final del Notebook:
            El cuaderno debe estar en formato JSON, completo y listo para ejecutarse.
            No incluyas ninguna instrucción print().
            Asegúrate de que el eje de fechas no tenga duplicados y muestre correctamente las 6 fechas (3 reales y 3 predichas).
            Cada gráfico debe tener título, etiquetas en los ejes y leyenda.

    Devuelve el cuaderno completo en formato JSON.

------------------------------------------------ CHATGPT --------------------------------------------------
{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Predicción del Precio de Bitcoin (3 días) - Predicción Iterativa\n",
    "\n",
    "Este cuaderno predice el precio de Bitcoin a 3 días vista utilizando datos diarios del dataset obtenido de:\n",
    "[github.com/ibrahim-cheema/Analysis-of-Cryptocurrency-Prices](https://github.com/ibrahim-cheema/Analysis-of-Cryptocurrency-Prices/blob/main/bitcoin_data.csv)\n",
    "\n",
    "El dataset contiene las siguientes columnas:\n",
    "- **time**: fecha en formato YYYY-MM-DD\n",
    "- **open**, **high**, **low**, **price**: precios de apertura, máximo, mínimo y cierre\n",
    "- **vwap**: precio ponderado\n",
    "- **volume**: volumen de transacciones\n",
    "- **currency**: (valor constante, se omite)\n",
    "- **log_return**: retorno logarítmico\n",
    "\n",
    "Se crea la variable `Target` desplazando la columna **price** 3 días hacia arriba para predecir el precio a 3 días vista.\n",
    "\n",
    "Se entrenan tres modelos de regresión (LinearRegression, RandomForestRegressor y XGBoostRegressor) y se realiza una predicción iterativa en la que, para cada día futuro, se actualizan las características de forma naïve.\n",
    "\n",
    "Cada uno de los siguientes 3 plots muestra:\n",
    "  - Los últimos 3 datos reales (últimas 3 fechas y precios reales).\n",
    "  - El pronóstico iterativo para los próximos 3 días (fechas futuras y precios predichos).\n",
    "  - Una conexión (línea discontinua) entre el último dato real y el primer pronóstico.\n",
    "  - El eje x presenta 6 tick marks (3 reales y 3 predichos) sin duplicados.\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "import pandas as pd\n",
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n",
    "import seaborn as sns\n",
    "\n",
    "from sklearn.model_selection import train_test_split, cross_val_score\n",
    "from sklearn.linear_model import LinearRegression\n",
    "from sklearn.ensemble import RandomForestRegressor\n",
    "from sklearn.metrics import mean_squared_error, r2_score\n",
    "\n",
    "from sklearn.impute import SimpleImputer\n",
    "\n",
    "import xgboost as xgb\n",
    "\n",
    "import matplotlib.dates as mdates\n",
    "\n",
    "%matplotlib inline"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## 1. Carga y Preprocesamiento del Dataset\n",
    "\n",
    "Se carga el dataset desde GitHub, se convierte la columna **time** a tipo datetime y se ordenan los registros cronológicamente."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "url = 'https://raw.githubusercontent.com/ibrahim-cheema/Analysis-of-Cryptocurrency-Prices/main/bitcoin_data.csv'\n",
    "\n",
    "df = pd.read_csv(url)\n",
    "\n",
    "df['time'] = pd.to_datetime(df['time'], format='%Y-%m-%d')\n",
    "\n",
    "df.sort_values('time', inplace=True)\n",
    "df.reset_index(drop=True, inplace=True)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## 2. Generación de la Variable Objetivo\n",
    "\n",
    "Se crea la variable `Target` desplazando la columna **price** 3 días hacia arriba para predecir el precio a 3 días vista. Se eliminan las filas sin valor en `Target`."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "df['Target'] = df['price'].shift(-3)\n",
    "df.dropna(subset=['Target'], inplace=True)\n",
    "df.reset_index(drop=True, inplace=True)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## 3. Selección de Características\n",
    "\n",
    "Se seleccionan las siguientes características para predecir el precio futuro:\n",
    "- **open**\n",
    "- **high**\n",
    "- **low**\n",
    "- **price**\n",
    "- **vwap**\n",
    "- **volume**\n",
    "- **log_return**\n",
    "\n",
    "La columna **currency** se omite ya que es constante."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "features = [\n",
    "    'open',\n",
    "    'high',\n",
    "    'low',\n",
    "    'price',\n",
    "    'vwap',\n",
    "    'volume',\n",
    "    'log_return'\n",
    "]\n",
    "\n",
    "X = df[features]\n",
    "y = df['Target']"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## 4. División de Datos en Entrenamiento y Prueba\n",
    "\n",
    "Se separan los datos en un 80% para entrenamiento y un 20% para prueba, manteniendo el orden cronológico (sin mezclar)."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, shuffle=False)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## 5. Imputación de Valores Nulos\n",
    "\n",
    "Se utiliza **SimpleImputer** para rellenar los valores nulos en las características usando la mediana de cada columna."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "imputer = SimpleImputer(strategy='median')\n",
    "X_train_imputed = imputer.fit_transform(X_train)\n",
    "X_test_imputed = imputer.transform(X_test)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## 6. Entrenamiento de Modelos\n",
    "\n",
    "Se entrenan tres modelos de regresión: **LinearRegression**, **RandomForestRegressor** y **XGBoostRegressor**."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "lr = LinearRegression()\n",
    "lr.fit(X_train_imputed, y_train)\n",
    "y_pred_lr = lr.predict(X_test_imputed)\n",
    "\n",
    "rfr = RandomForestRegressor(n_estimators=100, random_state=42)\n",
    "rfr.fit(X_train_imputed, y_train)\n",
    "y_pred_rfr = rfr.predict(X_test_imputed)\n",
    "\n",
    "xgbr = xgb.XGBRegressor(objective='reg:squarederror', n_estimators=100, random_state=42)\n",
    "xgbr.fit(X_train_imputed, y_train)\n",
    "y_pred_xgbr = xgbr.predict(X_test_imputed)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## 7. Predicción Iterativa para los Próximos 3 Días\n",
    "\n",
    "Se define una función que realiza una predicción iterativa (actualizando de forma naïve las características) para generar pronósticos para los próximos 3 días."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "def iterative_forecast(model, last_features, n_days=3):\n",
    "    forecast = []\n",
    "    current_features = last_features.copy()\n",
    "    for i in range(n_days):\n",
    "        pred = model.predict(current_features.reshape(1, -1))[0]\n",
    "        forecast.append(pred)\n",
    "        new_features = current_features.copy()\n",
    "        new_features[0] = pred                # nuevo open\n",
    "        new_features[1] = pred * 1.01           # simula high\n",
    "        new_features[2] = pred * 0.99           # simula low\n",
    "        new_features[3] = pred                # nuevo price\n",
    "        new_features[4] = pred                # nuevo vwap\n",
    "        old_price = current_features[3]\n",
    "        new_features[6] = np.log(pred/old_price) if old_price > 0 else 0  # nuevo log_return\n",
    "        current_features = new_features\n",
    "    return np.array(forecast)\n",
    "\n",
    "last_features = X.iloc[-1].values\n",
    "\n",
    "forecast_lr = iterative_forecast(lr, last_features, n_days=3)\n",
    "forecast_rfr = iterative_forecast(rfr, last_features, n_days=3)\n",
    "forecast_xgbr = iterative_forecast(xgbr, last_features, n_days=3)\n",
    "\n",
    "last_date = df['time'].iloc[-1]\n",
    "future_dates = pd.date_range(start=last_date + pd.Timedelta(days=1), periods=3)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## 8. Gráficos Separados por Modelo\n",
    "\n",
    "Cada gráfico muestra:\n",
    "  - Los últimos 3 datos reales (fechas y precios) del dataset.\n",
    "  - El pronóstico iterativo para los próximos 3 días (fechas futuras y precios predichos).\n",
    "  - Una conexión (línea discontinua) entre el último dato real y el primer pronóstico.\n",
    "  - Un eje x con 6 tick marks: las 3 últimas fechas reales y las 3 fechas de pronóstico, sin duplicados.\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "last_real_dates = df['time'].iloc[-3:]\n",
    "last_real_prices = df['price'].iloc[-3:]\n",
    "\n",
    "# Gráfico para LinearRegression\n",
    "dates_lr = np.concatenate((last_real_dates.values, future_dates.values))\n",
    "prices_lr = np.concatenate((last_real_prices.values, forecast_lr))\n",
    "\n",
    "plt.figure(figsize=(12,6))\n",
    "plt.plot(dates_lr, prices_lr, 'o-', color='blue', label='LinearRegression')\n",
    "plt.axvline(x=last_date, linestyle='dotted', color='gray')\n",
    "plt.plot([last_real_dates.values[-1], future_dates.values[0]], [last_real_prices.values[-1], forecast_lr[0]],\n",
    "         linestyle='dotted', color='blue')\n",
    "plt.gca().set_xticks(np.concatenate((last_real_dates.values, future_dates.values)))\n",
    "for dt, val in zip(future_dates, forecast_lr):\n",
    "    plt.annotate(f\"{val:.2f}\", xy=(dt, val), xytext=(0,10), textcoords='offset points', ha='center', color='blue')\n",
    "plt.title('LinearRegression: Datos reales y pronóstico 3 días')\n",
    "plt.xlabel('Fecha')\n",
    "plt.ylabel('Precio de Bitcoin')\n",
    "plt.legend()\n",
    "plt.xticks(rotation=45)\n",
    "plt.show()\n",
    "\n",
    "# Gráfico para RandomForestRegressor\n",
    "dates_rfr = np.concatenate((last_real_dates.values, future_dates.values))\n",
    "prices_rfr = np.concatenate((last_real_prices.values, forecast_rfr))\n",
    "\n",
    "plt.figure(figsize=(12,6))\n",
    "plt.plot(dates_rfr, prices_rfr, 's-', color='green', label='RandomForest')\n",
    "plt.axvline(x=last_date, linestyle='dotted', color='gray')\n",
    "plt.plot([last_real_dates.values[-1], future_dates.values[0]], [last_real_prices.values[-1], forecast_rfr[0]],\n",
    "         linestyle='dotted', color='green')\n",
    "plt.gca().set_xticks(np.concatenate((last_real_dates.values, future_dates.values)))\n",
    "for dt, val in zip(future_dates, forecast_rfr):\n",
    "    plt.annotate(f\"{val:.2f}\", xy=(dt, val), xytext=(0,10), textcoords='offset points', ha='center', color='green')\n",
    "plt.title('RandomForest: Datos reales y pronóstico 3 días')\n",
    "plt.xlabel('Fecha')\n",
    "plt.ylabel('Precio de Bitcoin')\n",
    "plt.legend()\n",
    "plt.xticks(rotation=45)\n",
    "plt.show()\n",
    "\n",
    "# Gráfico para XGBoostRegressor\n",
    "dates_xgbr = np.concatenate((last_real_dates.values, future_dates.values))\n",
    "prices_xgbr = np.concatenate((last_real_prices.values, forecast_xgbr))\n",
    "\n",
    "plt.figure(figsize=(12,6))\n",
    "plt.plot(dates_xgbr, prices_xgbr, '^-', color='red', label='XGBoost')\n",
    "plt.axvline(x=last_date, linestyle='dotted', color='gray')\n",
    "plt.plot([last_real_dates.values[-1], future_dates.values[0]], [last_real_prices.values[-1], forecast_xgbr[0]],\n",
    "         linestyle='dotted', color='red')\n",
    "plt.gca().set_xticks(np.concatenate((last_real_dates.values, future_dates.values)))\n",
    "for dt, val in zip(future_dates, forecast_xgbr):\n",
    "    plt.annotate(f\"{val:.2f}\", xy=(dt, val), xytext=(0,10), textcoords='offset points', ha='center', color='red')\n",
    "plt.title('XGBoost: Datos reales y pronóstico 3 días')\n",
    "plt.xlabel('Fecha')\n",
    "plt.ylabel('Precio de Bitcoin')\n",
    "plt.legend()\n",
    "plt.xticks(rotation=45)\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## 9. Conclusiones y Próximos Pasos\n",
    "\n",
    "Se realizaron los siguientes pasos:\n",
    "1. Carga y preprocesamiento del dataset de Bitcoin desde GitHub.\n",
    "2. Generación de la variable objetivo `Target` (precio a 3 días vista).\n",
    "3. Selección de características relevantes: `open`, `high`, `low`, `price`, `vwap`, `volume` y `log_return`.\n",
    "4. División en conjuntos de entrenamiento y prueba manteniendo el orden cronológico.\n",
    "5. Imputación de valores nulos utilizando **SimpleImputer** con la mediana.\n",
    "6. Entrenamiento y evaluación de tres modelos de regresión: LinearRegression, RandomForestRegressor y XGBoostRegressor.\n",
    "7. Predicción iterativa para los próximos 3 días, actualizando de forma naïve las características para obtener valores distintos en cada día.\n",
    "8. Generación de tres gráficos separados, uno para cada modelo, que muestran 6 fechas en el eje x (las últimas 3 reales y las 3 predichas) junto con los precios correspondientes.\n",
    "\n",
    "### Próximos Pasos:\n",
    "- Afinar los hiperparámetros de los modelos.\n",
    "- Probar estrategias de actualización de características más realistas (por ejemplo, utilizando modelos de series temporales).\n",
    "- Explorar nuevas combinaciones de features o aplicar escalado de datos.\n",
    "- Validar y ajustar la metodología iterativa con feedback del equipo.\n",
    "\n",
    "Este pipeline combina una metodología tradicional con una visión de futuro en el análisis y pronóstico de criptomonedas."
   ]
  }
 ],
 "metadata": {
  "colab": {
   "name": "Prediccion_Bitcoin_Data.ipynb",
   "provenance": []
  },
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "name": "python",
   "version": "3.x"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}

